using UnityEngine;
using System.Collections;
//using System.SceneManager;

public class Done_GameController : MonoBehaviour
{
    public GameObject[] hazards;
    public Vector3 spawnValues;
    public int hazardCount;
    public float spawnWait;
    public float startWait;
    public float waveWait;

    public GUIText gameLevel;
    public GUIText scoreText;
    public GUIText restartText;
    public GUIText gameOverText;


    private int level;
    private bool gameOver;
    private bool restart;
    private int score;

    void Start()
    {
        gameOver = false;
        restart = false;
        restartText.text = "";
        gameOverText.text = "";
        score = 0;
        UpdateScore();
        StartCoroutine(SpawnWaves());
    }

    void Update()
    {
        if (restart)
        {
            if (Input.GetKeyDown(KeyCode.T))
            {
                Application.LoadLevel(Application.loadedLevel);
                Debug.Log(level);
            }
        }
    }

    IEnumerator SpawnWaves()
    {
        yield return new WaitForSeconds(startWait);
        //UpdategameLevel();
        UpdategameLevel();
        Debug.Log(level);

        while (true)
        {
            for (int i = 0; i < hazardCount; i++)
            {

                GameObject hazard = hazards[Random.Range(0, hazards.Length)];
                Vector3 spawnPosition = new Vector3(Random.Range(-spawnValues.x, spawnValues.x), spawnValues.y, spawnValues.z);
                Quaternion spawnRotation = Quaternion.identity;
                Instantiate(hazard, spawnPosition, spawnRotation);
                yield return new WaitForSeconds(spawnWait);


                //if(waveWait == 3)
                //Second object falling
                GameObject hazard2 = hazards[Random.Range(1, hazards.Length)];
                Vector4 spawnPosition1 = new Vector4(Random.Range(-spawnValues.x, spawnValues.x), spawnValues.y, spawnValues.z);
                Quaternion spawnRotation1 = Quaternion.identity;
                Instantiate(hazard, spawnPosition, spawnRotation);
                yield return new WaitForSeconds(spawnWait);

                /*
                //Third
                hazard2 = hazards[Random.Range(0, hazards.Length)];
                spawnPosition1 = new Vector4(Random.Range(-spawnValues.x, spawnValues.x), spawnValues.y, spawnValues.z);

                spawnRotation1 = Quaternion.identity;
                Instantiate(hazard, spawnPosition, spawnRotation);
                yield return new WaitForSeconds(spawnWait);*/

            }
            yield return new WaitForSeconds(waveWait);

            if (gameOver)
            {
                restartText.text = "Press 'T' for Start a new Journey"; //May change to long tap
                restart = true;
                break;
            }
        }
    }

    public void AddScore(int newScoreValue)
    {
        score += newScoreValue;
        UpdateScore();

    }

    void UpdategameLevel()
    {

        switch (score)
        {
            case 100:
                level++;
                gameLevel.text = "Level " + level;
                break;
            case 200:
                level++;
                gameLevel.text = "Level " + level;
                break;
            case 300:
                level++;
                gameLevel.text = "Level " + level;
                break;
                //Will be changed to different level curves;

        }
    }
    void UpdateScore()
    {
        scoreText.text = "Score: " + score;
    }

    public void GameOver()
    {
        gameOverText.text = "Life is Hard, Game is Over!";
        gameOver = true;
        //level = 0;
        //gameLevel.text = "Level " + level;
    }
}
